/*
  rcc_structs.h

  common data structures used for Rapid Logic CLI
*/


#ifndef __RCC_STRUCTS_HEADER__
#define __RCC_STRUCTS_HEADER__

typedef ubyte4  BitMask;
typedef ubyte   optType;
typedef ubyte   optAction;
typedef optType SubOption;
typedef ubyte   cliChar;
typedef ubyte4  paramID;

#define cli_env environment

/* just in case no ordering flag at all */
#ifndef __RCC_PARAMETER_ORDER_NONE__
#ifndef __RCC_PARAMETER_ORDER_UNNAMED__
#ifndef __RCC_PARAMETER_ORDER_FULL__
#define __RCC_PARAMETER_ORDER_NONE__
#endif
#endif
#endif

#ifdef	__RCC_PARAMETER_ORDER_NONE__
# define kRCC_DEFAULT_ORDER     kRCC_FLAG_ORDER_NONE
# define PARAMETER_DEFAULT      DB_IsParameterOrderNone
#endif

#ifdef	__RCC_PARAMETER_ORDER_UNNAMED__
# define kRCC_DEFAULT_ORDER     kRCC_FLAG_ORDER_SOME
# define PARAMETER_DEFAULT      DB_IsParameterOrderUnnamed
#endif

#ifdef	__RCC_PARAMETER_ORDER_FULL__
# define kRCC_DEFAULT_ORDER     kRCC_FLAG_ORDER_FULL
# define PARAMETER_DEFAULT      DB_IsParameterOrderFull
#endif

/* backfit for prior versions */

#define CliChannel ProcessComChannel

typedef enum KEY_STATE 
{
    KEY_STATE_INVALID, 
    KEY_STATE_DATA,
    KEY_STATE_ESC,
    KEY_STATE_CURSOR
} KEY_STATE;

/* for telnet negotiation */

typedef struct optionFlags
{
    optType    option;
    optAction  flag;
} optionFlags;

typedef enum TelState {
    TS_Invalid,
    TS_No,
    TS_WantNo,
    TS_WantYes,
    TS_Yes
} TelState;

enum QueueState {
    QUEUE_None,
    QUEUE_Empty,
    QUEUE_Opposite
};

typedef struct OptionState
{
    sbyte   name;
    ubyte   count;
    ubyte   optState;
    ubyte   queueState;
} OptionState;

typedef struct PairState 
{
    optType     option;
    sbyte       desired;
    OptionState host;
    OptionState client;
} PairState;

/*-----------------------------------------------------------------------*/

typedef RLSTATUS WriteHandle(struct environment *pEnv, sbyte *pBuf, sbyte4  BufSize);
typedef RLSTATUS ReadHandle(struct environment *pEnv, cliChar *charIn);
typedef RLSTATUS SessionInit(struct cli_env *pEnv);

/* possible types of tokenNodes */
typedef enum tokenType {
    kTT_INVALID, 
    kTT_NO, 
    kTT_NODE, 
    kTT_KEYWORD, 
    kTT_ABSOLUTE,
    kTT_DATA,
    kTT_ARRAY_START,
    kTT_ARRAY,
    kTT_BAD_PARAM,
    kTT_END_COMMAND,
    kTT_STDIO_PIPE,
    kTT_STDIO_OUT,
    kTT_STDIO_IN
} tokenType;

/*-----------------------------------------------------------------------*/

/* storage for parsed input line  */
typedef struct tokenNode {
    sbyte     *pStart;
    EditType   length;
    EditType   offset;
    void      *pNode;
    tokenType  type;
    sbyte4     flags;
} tokenNode;


typedef struct tokenTable {
    sbyte4              currentToken;       /* index to token               */
    sbyte4              numTokens;          /* total # tokens on line       */
    sbyte4              flags;              /* processing states            */
    sbyte4              fork;               /* namespace collision index    */
    sbyte4              currentParam;       /* for parameter ordering       */
    sbyte2              nodeParamCount;     /* params for current node      */
    sbyte2              allParamCount;      /* total count of params        */
    struct paramList   *pParamList;
    struct cmdNode     *pCurrentNode;
    struct cmdNode     *pPriorNode;
    tokenNode           tokens[kRCC_MAX_TOKENS];
    sbyte               buffer[kRCC_MAX_CMD_LEN + 1];
} tokenTable;

typedef RLSTATUS HandlerFunction(struct environment *pCliEnv, 
                                 struct paramList *pParamList, 
                                 sbyte *pOutputBuf);


/*-----------------------------------------------------------------------*/

/* structures generated by the RCIT */


typedef struct paramEntry
{
    paramID id;
    sbyte4  flags;
} paramEntry;


typedef struct oHandler
{
    sbyte4           flags;
    HandlerFunction *pHandlerFunc;
    sbyte4           paramCount;
    paramEntry      *pParams;
} oHandler;

typedef struct uHandler
{
    sbyte4           flags;
    HandlerFunction *pHandlerFunc;
    BitMask          reqdParamMask;
    BitMask          optlParamMask;
} uHandler;


#ifdef __RCC_PARAMETER_ORDER_NONE__
typedef uHandler handlerDefn;
#else
typedef oHandler handlerDefn;
#endif

typedef RLSTATUS IsParameter(cli_env * pCliEnv, Boolean exact);

typedef struct paramDefn
{
    sbyte      *pKeyword;
    DataType    type;
    paramID     id;
    ubyte4      flags;      /* general purpose...*/
    DTTypeInfo *pParamInfo;
} paramDefn;


typedef struct cmdNode
{
    sbyte          *pKeyword;
    sbyte          *pHelp;
    void          (*pHelpHandler)(struct cli_env *, struct cmdNode *, struct paramDefn *);
    ubyte4          flags;
    sbyte          *pPrompt;
    Access          accessLvl;
    sbyte2          numChildren;
    struct cmdNode *pChildren;
    sbyte2          numParams;
    paramDefn      *pParams;  
    sbyte2          numHandlers;
    handlerDefn    *pHandlers;
} cmdNode;

/*-----------------------------------------------------------------------*/

typedef struct paramDescr
{
    sbyte     *pValue;
    ubyte4     flags;
    sbyte4     position;
    sbyte2     arraySize;         /* number array elements        */
    sbyte2     arrayStart;        /* offset to first token        */
    struct paramDefn *pParamDefn;  
} paramDescr;


typedef struct paramList
{
    struct paramList   *pPrev;
    struct paramList   *pNext;
    handlerDefn        *pHandler;                /* exec handler for this data  */
    cmdNode            *pCmdNode;                /* command node to execute     */
    sbyte4	            modeDepth;               /* how many nodes there are    */
    ubyte4              flags;	                 /* if "no" token is given      */
    sbyte4	            numParams;               /* number of parameters        */
    paramDescr          params[kRCC_MAX_PARAMS]; /* parameter storage           */
    tokenTable         *pTokens;                 /* list of tokens in command   */
} paramList;

/*-----------------------------------------------------------------------*/

typedef struct CmdEditInfo {
    EditType  lineLength;     /* character count in line buffer     */
    EditType  cursorPos;      /* offset of cursor into buffer       */
    EditType  termX;          /* horizontal pos of cursor           */
    EditType  termY;          /* vertical pos of cursor             */
    EditType  startCol;       /* track before exec handler          */
    EditType  startRow;       /* track before exec handler          */
    sbyte4    bufferSize;
    ubyte4    flags;
    sbyte    *pInputBuffer;
} CmdEditInfo;

/*-----------------------------------------------------------------------*/

typedef struct CmdHistBuff {
    sbyte histCmd[kRCC_MAX_CMD_LEN]; /* the command */
} CmdHistBuff;

/*-----------------------------------------------------------------------*/

typedef struct HistInfo {
    sbyte4 bufferIndex;                /* points to [iNumCmds]              */
    sbyte4 iMaxHistCmds;	           /* max num hist cmds                 */
    sbyte4 iCurHistCmd;	               /* current hist cmd                  */
    sbyte4 iNumCmds;                   /* total number of commands issued   */
    sbyte  tempHist[kRCC_MAX_CMD_LEN]; /* current command when scrolling    */
    CmdHistBuff *pHistBuff;
} HistInfo;

/*-----------------------------------------------------------------------*/

typedef struct CmdAlias
{
    sbyte   *pName;
    sbyte   *pText;
} CmdAlias;

/*-----------------------------------------------------------------------*/

typedef struct AliasTable
{
    sbyte      *pAliasCmd;
    sbyte4      numEntries;
    sbyte4      bufferUsed;
    CmdAlias    alias[kRCC_ALIAS_COUNT];
    sbyte       data[kRCC_ALIAS_BUFFER_SIZE];
} AliasTable;

/*-----------------------------------------------------------------------*/

typedef struct LineOut {
    ubyte4  flags;      /* output settings                      */
    sbyte4  indent;     /* indent from left                     */
    sbyte4  height;     /* "screen" height                      */
    sbyte4  width;      /* "screen" width                       */
    sbyte4  maxSize;    /* maximum buffer size                  */
    sbyte4  length;     /* length of buffer contents            */
    sbyte4  offset;     /* offset to text not yet printed       */
    sbyte4  stop;       /* don't print text after this point    */
    sbyte4  lineCount;  /* number of lines printed this time    */
    sbyte  *pBuffer;    /* output buffer                        */
} LineOut;

typedef struct helpInfo_tag
{
    BitMask flags;
    sbyte4  width;
    sbyte4  leader;
    sbyte * pTitle;
    sbyte * pPrefix;
    sbyte * pNode;
    sbyte * pDelimiter;
    sbyte * pQuote;
    sbyte * pUnquote;
} helpInfo;

/*-----------------------------------------------------------------------*/

typedef struct cli_info_tag
{
    BitMask             flags;
    helpInfo            help;
    sbyte4              modeDepth;
    cmdNode            *pCurrentRoot;
    cmdNode            *pCmdNode;      /* currently evaluated/executing node */
    paramList          *pParamRoot;
    ProcessComChannel  *pChannel;
    environment        *pEnvironment;
    ubyte4              inputTime;
    sbyte               login[kRCC_MAX_LOGIN_LEN];
    sbyte               prompt[kRCC_MAX_PROMPT_LEN + 1];
    sbyte               promptTail[kRCC_MAX_PROMPT_TAIL_LEN];
    Length              promptLength;
    HistInfo            histInfo;
    CmdEditInfo         cmdEditInfo;
    AliasTable          aliasTable;
    sbyte4              errorTextLen;
    sbyte               errorText[kRCC_ERROR_TEXT_SIZE + 1];
    sbyte              *pErrorMsg;
    sbyte *             matches[kRCC_MATCH_LIST_SIZE];
    PairState           optHandled[kRCC_MAX_OPT_HANDLED];
    optType             subOption;
    ubyte               recvState;
	ubyte4				typeConn;
    sbyte4              timeOut;            /* seconds till session times out */
    WriteHandle        *pCliWriteHandle;
    ReadHandle         *pCliReadHandle;
    sbyte4              optBufferIndex;
    sbyte               optBuffer[kRCC_OPT_BUF_SIZE];
    sbyte               terminalName[kRCC_TERM_TYPE_SIZE];
    EditType            screenWidth;
    EditType            screenHeight;
    sbyte4              errorPos;
    LineOut             output;
	int                 fd;
    sbyte4              keyState;
    IsParameter        *pfParamCheck;
    void               *pCustom;  /* customer defined */
} cli_info;

/*-----------------------------------------------------------------------*/

typedef void     HelpHandler(struct cli_env *, struct cmdNode *, struct paramDefn *);

/*-----------------------------------------------------------------------*/

/* node/handler/param flags */
#define kRCC_COMMAND_NO             0x00001  /* can take no form             */
#define kRCC_COMMAND_MODE           0x00002  /* intermediate mode allowed    */
#define kRCC_COMMAND_GLOBAL         0x00004  /* global command               */
#define kRCC_COMMAND_META           0x00008  /* used by help command         */
#define kRCC_COMMAND_NO_EXEC        0x00010  /* don't execute                */
#define kRCC_COMMAND_EXTEND         0x00020  /* multiple commands-same line  */
#define kRCC_COMMAND_QUEUE          0x00040  /* queue same handler execution */
#define kRCC_COMMAND_IGNORE         0x00080  /* ignore extra parameters      */
#define kRCC_COMMAND_NO_CHAIN       0x00100  /* execute only first node      */
#define kRCC_COMMAND_NO_TO_ALL      0x00200  /* "no" applies to subnodes     */
#define kRCC_COMMAND_SHOW_NEXT      0x00400  /* just show next help entry    */
#define kRCC_COMMAND_EXACT_NODE     0x00800  /* sub nodes must match exactly */
#define kRCC_COMMAND_EXACT_PARAM    0x01000  /* parames must match exactly   */
#define kRCC_COMMAND_CUSTOM1        0x10000  /* custom placeholder           */
#define kRCC_COMMAND_CUSTOM2        0x20000  /* custom placeholder           */
#define kRCC_COMMAND_CUSTOM3        0x40000  /* custom placeholder           */

#define kRCC_COMMAND_NOLINK         kRCC_COMMAND_NO_CHAIN

#define kRCC_PARAMETER_OPTIONAL     0x0000  /* parameter is optional    */
#define kRCC_PARAMETER_REQUIRED     0x0001  /* parameter is required    */
#define kRCC_PARAMETER_NOKEYWORD    0x0002  /* parameter has no keyword */
#define kRCC_PARAMETER_ARRAY        0x0004  /* parameter is an array    */
#define kRCC_PARAMETER_IS_USED      0x0008  /* parameter used by handler*/
#define kRCC_PARAMETER_DEFAULT      0x0010  /* parameter used by handler*/

#define kRCC_HANDLER_NO         0x0001  /* for no form                  */

#define kPRINT_NO_ALLOC         0x0001  /* external buffer - don't free */


#define IS_SET(x, y, z)     ((x->z & y) == y)
#define IS_CLEAR(x, y)      (! IS_SET(x, y))
#define CLEAR_IT(x, y, z)   (x->z &= ~y)
#define SET_IT(x, y, z)     (x->z |=  y)

#define FLAG_SET(x, y)      IS_SET(x, y, flags)
#define FLAG_CLEAR(x, y)    (! FLAG_SET(x, y))
#define CLEAR_FLAG(x, y)    CLEAR_IT(x, y, flags)
#define SET_FLAG(x, y)      SET_IT(x, y, flags)

#define HELP_SET(x, y)      IS_SET(CLIENV(x), y, help.flags)
#define HELP_CLEAR(x, y)    (! HELP_SET(x, y))
#define CLEAR_HELP(x, y)    CLEAR_IT(CLIENV(x), y, help.flags)
#define SET_HELP(x, y)      SET_IT(CLIENV(x), y, help.flags)

#define IS_NO_COMMAND(x)   (FLAG_SET(x, kRCC_COMMAND_NO))

#define kNoHandler	kRCC_HANDLER_NO

/*-----------------------------------------------------------------------*/

#define CLIENV(pEnv)        ((cli_info *) SESSION_CONSUMER_GET_M(pEnv))

/* Set and check system "features" */
#define RCC_EnableFeature(pEnv, x)              SET_FLAG(CLIENV(pEnv), x)
#define RCC_DisableFeature(pEnv, x)             CLEAR_FLAG(CLIENV(pEnv), x)
#define RCC_IsEnabled(pEnv, x)                  FLAG_SET(CLIENV(pEnv), x)
#define RCC_NotEnabled(pEnv, x)                 FLAG_CLEAR(CLIENV(pEnv), x)

#define RCC_HELP_GET_M(pEnv, x)                 FLAG_SET(CLIENV(pEnv), x)
#define RCC_NotEnabled(pEnv, x)                 FLAG_CLEAR(CLIENV(pEnv), x)

/* helper access method/macros for edit session data */
#define MPRIN_OutputPtr(pEnv)                   (&(ENVOUT(pEnv)))
#define MPRIN_GetOutputBuffer(pEnv)             (ENVOUT(pEnv).pBuffer)
#define MPRIN_SetOutputBuffer(pEnv, x)          (ENVOUT(pEnv).pBuffer = x)
#define MPRIN_GetOutputBufferSize(pEnv)         (ENVOUT(pEnv).length)
#define MPRIN_GetOutputBufferMax(pEnv)          (ENVOUT(pEnv).maxSize)
#define MPRIN_SetOutputBufferMax(pEnv, x)       (ENVOUT(pEnv).maxSize = x)
#define MPRIN_AppendToOutput(pEnv, x)           (ENVOUT(pEnv).pBuffer[ENVOUT(pEnv).length++] = x)
#define MPRIN_BufferFull(pEnv)                  (ENVOUT(pEnv).length >= ENVOUT(pEnv).maxSize)

#define MPRIN_OutputLength(x)   FLAG_SET(x, kRCC_PRINT_MORE) ? x->stop - x->offset + 1 : pOutput->length - pOutput->offset;

#define ENVOUT(pEnv)                            (CLIENV(pEnv)->output)

#define MMISC_GetHelpPtr(pEnv)                 &(CLIENV(pEnv)->help)
#define MMISC_GetHelpInfo(pEnv)                 (CLIENV(pEnv)->help)
#define MMISC_SetHelpInfo(pEnv, X)              (CLIENV(pEnv)->help = X)

#define MCONN_GetTimeOut(pEnv)                  (CLIENV(pEnv)->timeOut)
#define MCONN_SetTimeOut(pEnv, X)               (CLIENV(pEnv)->timeOut = X)
#define MCONN_GetSubOption(pEnv)                (CLIENV(pEnv)->subOption)
#define MCONN_SetSubOption(pEnv, X)             (CLIENV(pEnv)->subOption = X)
#define MCONN_OptBufferPtr(pEnv)     (sbyte *) &(CLIENV(pEnv)->optBuffer)
#define MCONN_GetOptBufferIndex(pEnv)           (CLIENV(pEnv)->optBufferIndex)
#define MCONN_SetOptBufferIndex(pEnv, X)        (CLIENV(pEnv)->optBufferIndex = X)
#define MCONN_GetRecvState(pEnv)                (CLIENV(pEnv)->recvState)
#define MCONN_SetRecvState(pEnv, X)             (CLIENV(pEnv)->recvState = X)
#define MCONN_GetTermName(pEnv)                 (CLIENV(pEnv)->terminalName)
#define MCONN_SetTermName(pEnv, x)              STRNCPY(MCONN_GetTermName(pEnv), x, kRCC_TERM_TYPE_SIZE)
#define MCHAN_Env(pChan)                        ((environment *)(pChan->env))
#define MCHAN_CliEnv(pChan)                     (MCHAN_Env(pChan)->pCli)
#define MMISC_GetOptHandled(pEnv)               (CLIENV(pEnv)->optHandled)
#define MSCRN_GetWidth(pEnv)                    (CLIENV(pEnv)->screenWidth)
#define MSCRN_GetHeight(pEnv)                   (CLIENV(pEnv)->screenHeight)
#define MSCRN_SetWidth(pEnv,  x)                (CLIENV(pEnv)->screenWidth  = x)
#define MSCRN_SetHeight(pEnv, y)                (CLIENV(pEnv)->screenHeight = y)
#define MEDIT_GetXPos(pEnv)                     (CLIENV(pEnv)->cmdEditInfo.termX)
#define MEDIT_SetXPos(pEnv, x)                  (CLIENV(pEnv)->cmdEditInfo.termX = x)
#define MEDIT_GetYPos(pEnv)                     (CLIENV(pEnv)->cmdEditInfo.termY)
#define MEDIT_SetYPos(pEnv, x)                  (CLIENV(pEnv)->cmdEditInfo.termY = x)
#define MEDIT_GetLength(pEnv)                   (CLIENV(pEnv)->cmdEditInfo.lineLength)
#define MEDIT_SetLength(pEnv, x)                (CLIENV(pEnv)->cmdEditInfo.lineLength = x)
#define MEDIT_GetCursor(pEnv)                   (CLIENV(pEnv)->cmdEditInfo.cursorPos)
#define MEDIT_SetCursor(pEnv, y)                (CLIENV(pEnv)->cmdEditInfo.cursorPos = y)
#define MEDIT_GetBufPtr(pEnv)                   (CLIENV(pEnv)->cmdEditInfo.pInputBuffer)
#define MEDIT_SetBufPtr(pEnv, x)                (CLIENV(pEnv)->cmdEditInfo.pInputBuffer = x)
#define MEDIT_GetBufSize(pEnv)                  (CLIENV(pEnv)->cmdEditInfo.bufferSize)
#define MEDIT_SetBufSize(pEnv, x)               (CLIENV(pEnv)->cmdEditInfo.bufferSize = x)
#define MEDIT_Prompt(pEnv)                      (CLIENV(pEnv)->prompt)
#define MEDIT_GetPromptLen(pEnv)                (CLIENV(pEnv)->promptLength)
#define MEDIT_SetPromptLen(pEnv, x)             (CLIENV(pEnv)->promptLength = x)
#define MEDIT_PromptTail(pEnv)                  (CLIENV(pEnv)->promptTail)
#define MEDIT_GetIndent(pEnv)                   (ENVOUT(pEnv).indent)
#define MEDIT_SetIndent(pEnv, x)                (ENVOUT(pEnv).indent = x)
#define MEDIT_EditInfoPtr(pEnv)               (&(CLIENV(pEnv)->cmdEditInfo))
#define MHIST_History(pEnv)                   (&(CLIENV(pEnv)->histInfo))
#define MHIST_TempBuf(hist)                     (hist->tempHist)
#define MMISC_GetChannel(pEnv)                  (CLIENV(pEnv)->pChannel)
#define MMISC_SetChannel(pEnv, X)               (CLIENV(pEnv)->pChannel = X)
#define MMISC_GetThreadState(pEnv)              (CLIENV(pEnv)->pChannel->ThreadState)
#define MMISC_SetThreadState(pEnv, X)           (CLIENV(pEnv)->pChannel->ThreadState = X)
#define MCONN_GetWriteHandle(pEnv)              (CLIENV(pEnv)->pCliWriteHandle)
#define MCONN_GetReadHandle(pEnv)               (CLIENV(pEnv)->pCliReadHandle)
#define MCONN_SetWriteHandle(pEnv, X)           (CLIENV(pEnv)->pCliWriteHandle = X)
#define MCONN_SetReadHandle(pEnv, X)            (CLIENV(pEnv)->pCliReadHandle = X)
#define MCONN_GetConnType(pEnv)                 (CLIENV(pEnv)->typeConn)
#define MCONN_SetConnType(pEnv, X)              (CLIENV(pEnv)->typeConn = X)
#define MCONN_GetSock(pEnv)                     (CLIENV(pEnv)->pChannel->sock)
#define MCONN_GetInputTime(pEnv)                (CLIENV(pEnv)->inputTime)
#define MCONN_SetInputTime(pEnv, X)             (CLIENV(pEnv)->inputTime = X)
#define MCONN_GetKeyState(pEnv)                 (CLIENV(pEnv)->keyState)
#define MCONN_SetKeyState(pEnv, X)              (CLIENV(pEnv)->keyState = X)
#define MMISC_MatchList(pEnv)                   (CLIENV(pEnv)->matches)
#define MMISC_GetEnv(pEnv)                      (CLIENV(pEnv)->pEnvironment)
#define MMISC_SetEnv(pEnv, X)                   (CLIENV(pEnv)->pEnvironment = X)
#define MMISC_GetCustom(pEnv)                   (CLIENV(pEnv)->pCustom)
#define MMISC_SetCustom(pEnv, X)                (CLIENV(pEnv)->pCustom = X)
#define MMISC_GetFD(pEnv)                       (CLIENV(pEnv)->fd)
#define MMISC_SetFD(pEnv, X)                    (CLIENV(pEnv)->fd = X)
#define MMISC_GetCliNode(pEnv)                  (CLIENV(pEnv)->pCliNode)
#define MMISC_SetCliNode(pEnv, X)               (CLIENV(pEnv)->pCliNode = X)
#define MMISC_GetRootParam(pEnv)                (CLIENV(pEnv)->pParamRoot)
#define MMISC_SetRootParam(pEnv,pList)          (CLIENV(pEnv)->pParamRoot = pList)
#define MMISC_GetModeDepth(pEnv)                (CLIENV(pEnv)->modeDepth)
#define MMISC_SetModeDepth(pEnv, depth)         (CLIENV(pEnv)->modeDepth = depth)
#define MMISC_GetParamCheck(pEnv)               (CLIENV(pEnv)->pfParamCheck)
#define MMISC_SetParamCheck(pEnv, pc)           (CLIENV(pEnv)->pfParamCheck = pc)
#define MMISC_GetAccess(pEnv)                   (pEnv->UserLevel)
#define MMISC_SetAccess(pEnv, access)           (pEnv->UserLevel = access)
#define MMISC_GetCurrRoot(pEnv)                 (CLIENV(pEnv)->pCurrentRoot)
#define MMISC_SetCurrRoot(pEnv, pNode)          (CLIENV(pEnv)->pCurrentRoot = pNode)
#define MMISC_PrevRootPtr(pEnv)                 (CLIENV(pEnv)->pPrevRoot)
#define MMISC_GetLogin(pEnv)                    (CLIENV(pEnv)->login)
#define MMISC_SetLogin(pEnv, x)                  STRNCPY(CLIENV(pEnv)->login, x, kRCC_MAX_LOGIN_LEN)
#define MMISC_AliasCmd(pEnv)                    (CLIENV(pEnv)->aliasTable.pAliasCmd)
#define MMISC_AliasPtr(pEnv)                   &(CLIENV(pEnv)->aliasTable)
#define MMISC_GetErrorPos(pEnv)                 (CLIENV(pEnv)->errorPos)
#define MMISC_SetErrorPos(pEnv, x)              (CLIENV(pEnv)->errorPos = x)
#define MMISC_GetErrorText(pEnv)                (CLIENV(pEnv)->errorText)
#define MMISC_SetErrorText(pEnv, msg)            STRNCPY(CLIENV(pEnv)->errorText, msg, kRCC_ERROR_TEXT_SIZE)
#define MMISC_GetErrorLen(pEnv)                 (CLIENV(pEnv)->errorTextLen)
#define MMISC_SetErrorLen(pEnv, x)              (CLIENV(pEnv)->errorTextLen = x)
#define MMISC_ValidGlobal(node, global)         (FLAG_SET(node, kRCC_COMMAND_GLOBAL) == global)
#define MMISC_GetNodePrompt(x)                  (NULL != x ? x->pPrompt : NULL)
#define MMISC_GetCmdNode(pEnv)                  (CLIENV(pEnv)->pCmdNode)
#define MMISC_SetCmdNode(pEnv, pNode)           (CLIENV(pEnv)->pCmdNode = pNode)
#define MMISC_OutputPtr(pEnv)                   (&(ENVOUT(pEnv)))
#define MMISC_OutputBuffer(pEnv)                (ENVOUT(pEnv).pBuffer)
#define MPARM_HasKeyword(x)                     (!(FLAG_SET(x, kRCC_PARAMETER_NOKEYWORD) | NULL_STRING(x->pKeyword)))
#define MEDIT_CopyFromInput(pEnv, dest)         STRCPY(dest, MEDIT_GetBufPtr(pEnv))

/* for temporary backwards compatability */
#define MEDIT_BufPtr      MEDIT_GetBufPtr
#define MCONN_TermType    MCONN_GetTermName
#define MCONN_SetTermType MCONN_SetTermName
#define MMISC_ExecNode    MMISC_GetCmdNode  
#define MMISC_GetExecNode MMISC_GetCmdNode  
#define MMISC_SetExecNode MMISC_SetCmdNode
#define MMISC_Login       MMISC_GetLogin 
#endif /* ifndef __RCC_STRUCTS_HEADER__ */
